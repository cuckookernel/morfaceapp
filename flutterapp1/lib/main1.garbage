// Copyright 2018 The Flutter team. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'dart:io';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'package:path/path.dart' as p;
import 'package:path_provider/path_provider.dart';



void main() async {
  WidgetsFlutterBinding.ensureInitialized();

// Obtain a list of the available cameras on the device.
  final cameras = await availableCameras();

// Get a specific camera from the list of available cameras.
  final firstCamera = cameras.first;
  print( "first camera:" + firstCamera.toString() );

  runApp(
    MorfaceApp(firstCamera)
      /* MaterialApp(
        title: 'Welcome to Flutter',
        home: TakePictureScreen(
          // Pass the appropriate camera to the TakePictureScreen widget.
          camera: firstCamera,
        )
      ) */
  );
}



class MorfaceApp extends StatefulWidget {
  CameraDescription camera;
  MorfaceApp(this.camera);

  @override
  State<StatefulWidget> createState() => _MorfaceAppState(camera);
}

class _MorfaceAppState extends State<MorfaceApp> {
  final CameraDescription camera;
  Key _currentRouteKey;
  MaskedImage maskedImage1;
  MaskedImage maskedImage2;

  _MorfaceAppState( this.camera ) {
    print("MorfaceAppState: constructor: $camera");
  }

  void initState() {
    super.initState();
  }

  @override
  Widget build( BuildContext context ) {
    return MaterialApp (
      title: 'Morface',
      home: Navigator(
        pages: [
          buildHome(),
          if (_currentRouteKey != null) TakePicturePage(_currentRouteKey, camera)
        ],
        onPopPage: (route, result) {
          // print("Navigator onPopPage $route, pages has: ${pages.size}")
          route.didPop(result);
        }
      )
    );

  } // build

  MaterialPage buildHome() {
    return MaterialPage(
      key: ValueKey('HomePage'),
      child: Scaffold(
          appBar: AppBar(title: Text("Home"),
          ),
          body: Column(
            children: [
              GestureDetector(
                  onTap: () { _handleTap("A"); },
                  child: Container(
                      height: 400,
                      child: Row( children: [Center(child:Text("Set Image A"))] )
                  )
              ),
              GestureDetector(
                  onTap: () { _handleTap("B"); },
                  child: Container(
                      child: Row( children: [Text("Set Image B")] )
                  )
              ),
            ],
          )
      ),
    );
  }

  _handleTap( String imgName ) {
    print("tap: $imgName");
    setState(() {
      _currentRouteKey = ValueKey("takePic/$imgName" );
    });
  }
}

class TakePicturePage extends Page {
  CameraDescription camera;

  TakePicturePage(Key key, this.camera) : super(key:key);

  Route createRoute(BuildContext context) {
    return MaterialPageRoute(
      settings: this,
      builder: (BuildContext context) {
        return TakePictureScreen(key:key, camera:camera);
      }
    );
  }
}

// A screen that takes in a list of cameras and the Directory to store images.
class TakePictureScreen extends StatefulWidget {
  final CameraDescription camera;

  const TakePictureScreen({
    Key key,
    @required this.camera,
  }) : super(key: key);

  @override
  TakePictureScreenState createState() => TakePictureScreenState();
}

class TakePictureScreenState extends State<TakePictureScreen> {
  // Add two variables to the state class to store the CameraController and
  // the Future.
  CameraController _controller;
  Future<void> _initializeControllerFuture;

  @override
  void initState() {
    super.initState();
    // To display the current output from the camera,
    // create a CameraController.
    _controller = CameraController(
      // Get a specific camera from the list of available cameras.
      widget.camera,
      // Define the resolution to use.
      ResolutionPreset.medium,
    );

    // Next, initialize the controller. This returns a Future.
    _initializeControllerFuture = _controller.initialize();
  }

  @override
  void dispose() {
    // Dispose of the controller when the widget is disposed.
    _controller.dispose();
    super.dispose();
  }

  Widget build(BuildContext context) {
      return Scaffold(
        appBar: AppBar(title: Text('Take a picture')),
        // Wait until the controller is initialized before displaying the
        // camera preview. Use a FutureBuilder to display a loading spinner
        // until the controller has finished initializing.
        body: FutureBuilder<void>(
          future: _initializeControllerFuture,
          builder: (context, snapshot) {
            if (snapshot.connectionState == ConnectionState.done) {
              // If the Future is complete, display the preview.
              return CameraPreview(_controller);
            } else {
              // Otherwise, display a loading indicator.
              return Center(child: CircularProgressIndicator());
            }
          },
        ),
        floatingActionButton: FloatingActionButton(
          child: Icon(Icons.camera_alt),
          // Provide an onPressed callback.
          onPressed: () async {
            // Take the Picture in a try / catch block. If anything goes wrong,
            // catch the error.
            try {
              // Ensure that the camera is initialized.
              await _initializeControllerFuture;

              // Construct the path where the image should be saved using the
              // pattern package.
              final path = p.join(
                // Store the picture in the temp directory.
                // Find the temp directory using the `path_provider` plugin.
                (await getTemporaryDirectory()).path,
                '${DateTime.now()}.png',
              );

              // Attempt to take a picture and log where it's been saved.
              await _controller.takePicture(path);
              print( "picture saved under: $path");

              // If the picture was taken, display it on a new screen.
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => DisplayPictureScreen(imagePath: path),
                ),
              );
            } catch (e) {
              // If an error occurs, log the error to the console.
              print(e);
            }
          },
        ),
      );
    } // build
}



// A widget that displays the picture taken by the user.
class DisplayPictureScreen extends StatelessWidget {
  final String imagePath;

  const DisplayPictureScreen({Key key, this.imagePath}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Display the Picture')),
      // The image is stored as a file on the device. Use the `Image.file`
      // constructor with the given path to display the image.
      body: Image.file(File(imagePath)),
    );
  }
}